#pragma pack(0)的作用
https://blog.csdn.net/vbLittleBoy/article/details/6935165

c++中#pragma的用法
格式一般为: #Pragma Para 
1：#Pragma message(“消息文本”)   //编译时输出
  例：判断自己有没有在源代码的什么地方定义了_X86这个宏
  #ifdef _X86 
  #Pragma message(“_X86 macro activated!”) 
  #endif 
2：#pragma code_seg( ["section-name"[,"section-class"] ] ) 
   能够设置程序中函数代码存放的代码段
3：#pragma once (比较常用） 
   在头文件的最开始加入这条指令就能够保证头文件被编译一次
4：#pragma hdrstop
   表示预编译头文件到此为止，后面的头文件不进行预编译。BCB可以预编译头文件以加快链接的速度
   但如果所有头文件都进行预编译又可能占太多磁盘空间，所以使用这个选项排除一些头文件。 
   有时单元之间有依赖关系，比如单元A依赖单元B，所以单元B要先于单元A编译。
   你可以用#pragma startup指定编译优先级
   如果使用了#pragma package(smart_init) ，BCB就会根据优先级的大小先后编译。 
5：#pragma resource "*.dfm"
   表示把*.dfm文件中的资源加入工程。*.dfm中包括窗体外观的定义。
6：#pragma warning( disable : 4507 34; once : 4385; error : 164 ) 
   等价于：
   #pragma warning(disable:4507 34) // 不显示4507和34号警告信息 
   #pragma warning(once:4385)       // 4385号警告信息仅报告一次 
   #pragma warning(error:164)       // 把164号警告信息作为一个错误。 
   例：
   #pragma warning( push [ ,n ] ) 
   #pragma warning( pop ) 
   这里n代表一个警告等级(1---4)。 
   #pragma warning( push )保存所有警告信息的现有的警告状态。 
   #pragma warning( push, n)保存所有警告信息的现有的警告状态，并且把全局警告 
   等级设定为n。 
   #pragma warning( pop )向栈中弹出最后一个警告信息，在入栈和出栈之间所作的 
   一切改动取消。例如： 
   #pragma warning( push ) 
   #pragma warning( disable : 4705 ) 
   #pragma warning( disable : 4706 ) 
   #pragma warning( disable : 4707 ) 
   
   #pragma warning( pop ) 
   在这段代码的最后，重新保存所有的警告信息(包括4705，4706和4707)
7：pragma comment(...) 
   该指令将一个注释记录放入一个对象文件或可执行文件中。 
   常用的lib关键字，可以帮我们连入一个库文件。 
8：＃pragma pack(1) 
主要用来设置结构定义的字节对齐方式，
比如是单字节对齐，双字节对齐等，
比如如果是双字节对齐，那么结构的成员变量的地址必须是2的整数倍，
这就造成了字节补齐，但是提高了访问速度。
单字节呢，就是没有补齐，成员变量的地址是连续的，其他依次类推，通常是4，8等。
通常用于网络传输数据，特别是传输整个结构时，必须采取单字节对齐，
这样才可以直接把结构地址，以及结构长度，作为Send的参数发送整个结构，
否则只能依次发送结构的成员，要不然会出现结构解释的差异。 

C++ 异常处理
三个关键字：try、catch、throw














   
